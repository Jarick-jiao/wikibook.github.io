{"categories":[{"title":"Github","uri":"https://jarick-jiao.github.io/wikibook.github.io/categories/Github/"},{"title":"Hugo","uri":"https://jarick-jiao.github.io/wikibook.github.io/categories/Hugo/"},{"title":"云平台","uri":"https://jarick-jiao.github.io/wikibook.github.io/categories/%E4%BA%91%E5%B9%B3%E5%8F%B0/"},{"title":"大数据","uri":"https://jarick-jiao.github.io/wikibook.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"title":"容器服务","uri":"https://jarick-jiao.github.io/wikibook.github.io/categories/%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1/"},{"title":"数据库","uri":"https://jarick-jiao.github.io/wikibook.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"posts":[{"content":"Hugo site to Github Pages for Github Actions\nHugo 博客建站方法 参考相关链接：\n Github站点：https://github.com/gohugoio/hugo 官方站点： https://gohugo.io/getting-started/ Github Actions: https://cloud.tencent.com/developer/article/1647964 参考以下流程图：    本地添加文章，提交到Github，会自动触发Github Actions 发布到Github Pages进行托管。之后即可通过 Github 给 Pages 生成的 URL 访问即可。\n Hugo本地site，选择合适的主题 Install Hugo  Hugo 下载： https://github.com/gohugoio/hugo/releases 创建Hugo工作目录: mkdir GitHubRepo ; cd GitHubRepo hugo \u0026ndash;help  Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at http://gohugo.io/. Usage: hugo [flags] hugo [command] Available Commands: config Print the site configuration convert Convert your content to different formats deploy Deploy your site to a Cloud provider. env Print Hugo version and environment info gen A collection of several useful generators. help Help about any command import Import your site from others. list Listing out various types of content mod Various Hugo Modules helpers. new Create new content for your site server A high performance webserver version Print the version number of Hugo Flags: -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --cleanDestinationDir remove files from destination not found in static directories --config string config file (default is path/config.yaml|json|toml) --configDir string config dir (default \u0026quot;config\u0026quot;) -c, --contentDir string filesystem path to content directory --debug debug output -d, --destination string filesystem path to write files to --disableKinds strings disable different kind of pages (home, RSS etc.) --enableGitInfo add Git revision, date and author info to the pages -e, --environment string build environment --forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, --help help for hugo --i18n-warnings print missing translations --ignoreCache ignores the cache directory --ignoreVendor ignores any _vendor directory --ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern -l, --layoutDir string filesystem path to layout directory --log enable Logging --logFile string log File path (if set, logging enabled automatically) --minify minify any supported output format (HTML, XML etc.) --noChmod don't sync permission mode of files --noTimes don't sync modification time of files --path-warnings print warnings on duplicate target paths etc. --print-mem print memory usage to screen at intervals --quiet build in quiet mode --renderToMemory render to memory (only useful for benchmark testing) -s, --source string filesystem path to read files relative from --templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, --theme strings themes to use (located in /themes/THEMENAME/) --themesDir string filesystem path to themes directory --trace file write trace to file (not useful in general) -v, --verbose verbose output --verboseLog verbose logging -w, --watch watch filesystem for changes and recreate as needed  Build site  hugo new site . hugo new site [SiteName] #也可以指定生成站点目录  Clone Theme Theme 主题库： https://themes.gohugo.io/\ncd themes ; git clone https://github.com/spf13/hyde.git #(参考主题)  编辑config.yml 部署相关配置\ntheme: pure # 主题名称（必填），参考 theme 目录下文件夹名称 baseURL: https://GithubName.github.io/wikibook.github.io #如需发布，则需要指定URL（发布站点 GitHab Pages），本地发布可不填 publishDir : \u0026quot;./public\u0026quot; # 静态站点存放路径，默认路径 ...  启动本地站点 本地启动预览\nhugo server --bind=\u0026quot;0.0.0.0\u0026quot; -v -w -p 11311 -b http://192.168.7.221 # -b --baseURL string  生成静态站点\nhugo --theme=pure --buildDrafts --config=muconfig.yml --baseUrl=\u0026quot;http://192.168.7.221\u0026quot; # 默认public目录，生成静态网站数据  GitHub pages 站点和后端存储站点  生成SSH Key，生成的Public Key和Private Key  参考官方文档：https://docs.github.com/en/github/authenticating-to-github/error-permission-denied-publickey\n1、 家目录是否存在Key，如果不存在则生成。 ssh-keygen -t rsa -b 2048 -C \u0026quot;你自己的邮箱地址\u0026quot; # 修改邮箱地址为你自己的邮箱地址，注意此处邮箱地址前后的双引号为英文格式双引号； #git config --global --list 可获取邮箱地址：生成过程中可以自定义key名称，（可选） 2、 $ ssh-agent -s #确认ssh-agent是否开启状态 SSH_AUTH_SOCK=/tmp/ssh-DTHO70HfeE51/agent.2003; export SSH_AUTH_SOCK; SSH_AGENT_PID=2004; export SSH_AGENT_PID; echo Agent pid 2004; 3、 $ ssh-add -l -E sha256 you have a private key generated and loaded into SSH. 添加key 到 github/Settings/SSH AND GPG keys 4、 多key情况下，需要编辑以下文件：（可选） $ cat /c/Users/Jarick/.ssh/config Host github User git HostName github.com PreferredAuthentications publickey IdentityFile /c/Users/Jarick/.ssh/id_rsa ServerAliveInterval 300 ServerAliveCountMax 10 5、 测试验证 $ ssh -T git@github.com \u0026gt; Hi username! You've successfully authenticated...   创建后端存储库：存储Hugo核心数据\nGithub blog source： blog\n类型：Private(推荐)/Public\nssh key： \u0026lt;Private Key\u0026gt;\n配置类型：Secrets\n配置变量： ACTIONS_DEPLOY_KEY #参考流水线变量 deploy_key 其他配置： 开启 Allow write access 选项 默认branch： master\n  创建发布库：发布 public目录生成的静态站点\nGithub blog publish： wikibook.github.io\n类型：Public\n名称格式：.github.io 结尾\nssh key： Public Key\n配置类型： Deploy Keys\n发布URL：https://GithubName.github.io/wikibook.github.io # 获取路径：wikibook.github.io/setting/GitHub Pages/Your site is published at :xxxx\n  发布站点到GitHub Pages\n   手动发布，为保持源库git统一，可新建public目录。   有关public目录位置的说明：\n手动发布：为了不破坏存储库整体性，通过在存储库目录外建public文件夹，相关配置参数： publishDir : \u0026ldquo;../public\u0026rdquo;\n流水线发布： 只有存储库代码变化提交之后，就会触发静态站点重建，因此选择在存储库内创建public目录，相关配置参数： publishDir : \u0026ldquo;../public\u0026rdquo;\n  修改config.yml  baseURL: https://GithubName.github.io/wikibook.github.io publishDir : \u0026quot;../public\u0026quot;   cd GitHubRepo; touch deploy.sh  #!/bin/sh # If a command fails then the deploy stops set -e printf \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026quot; # Build the project. #hugo -D # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;` hugo --theme=pure --buildDrafts --config=muconfig.yml --baseUrl=\u0026quot;https://GithubName.github.io/wikibook.github.io/\u0026quot; # Go To Public folder cd ../public # Add changes to git. git add . # Commit changes. msg=\u0026quot;rebuilding hugo site $(date)\u0026quot; if [ -n \u0026quot;$*\u0026quot; ]; then msg=\u0026quot;$*\u0026quot; fi git commit -m \u0026quot;$msg\u0026quot; # Push source and build repos. git push origin master   执行发布脚本，访问站点\n执行： ./deploy.sh\n检查： ls ../public 检查生产静态站点数据，访问发布库\u0026lt;githubname/registry\u0026gt;.github.io.\n访问： https://GithubName.github.io/wikibook.github.io/  GitHub Actions 流水线  编写workflows  编辑 main.yml\nname: Deploy Hugo Site to Github Pages on Master Branch on: push: branches: - master #发布库branch，获取路径：wikibook.github.io/setting/GitHub Pages/Source jobs: build-deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v1 # v2 does not have submodules option now # with: # submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.81.0' #hugo version extended: true #其他版本 - name: Build run: hugo --theme=pure --buildDrafts --baseUrl=\u0026quot;https://GithubName.github.io/wikibook.github.io/\u0026quot; #发布静态站点 - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名 external_repository: GithubName/wikibook.github.io # Github Pages 远程仓库 publish_dir: \u0026quot;./public\u0026quot; # 发布静态站点数据目录（默认hugo工作目录public文件夹） keep_files: false # remove existing files publish_branch: master # deploying branch 本地branch分支 commit_message: ${{ github.event.head_commit.message }}  触发流水线并发布站点    编辑站点网页: content/posts/test.md\n  提交代码并发布\n  git add content/posts/test.md msg=\u0026quot;rebuilding hugo site $(date)\u0026quot; git commit -m \u0026quot;$msg\u0026quot; git push origin master  预览调试 后端存储库 Actions ，查看All workflows 任务已经完成，站点可以正常访问。\nconfig 其他特殊配置项   保持分类的原始名字（false会做转小写处理）\npreserveTaxonomyNames = true\n  是否禁止URL Path转小写\ndisablePathToLower = true\n  开启draft : true\n ","id":0,"section":"posts","summary":"\u003cp\u003eHugo site to Github Pages for Github Actions\u003c/p\u003e","tags":["Hugo 建站"],"title":"Hugo site build","uri":"https://jarick-jiao.github.io/wikibook.github.io/2021/02/hugosite/","year":"2021"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n文章索引目录 title: 文章标题\ncategories:\n 文章分类\ntags: 文章标签\ntoc: true # 是否启用内容索引  sidebar侧边栏\n文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可：\ntitle: 文章标题\ncategories:\n 文章分类\ntags: 文章标签\nsidebar: none # 是否启用sidebar侧边栏，none：不启用 ","id":1,"section":"posts","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","tags":["博客指南","流程制度","专业技术","案例分享"],"title":"开篇第一课","uri":"https://jarick-jiao.github.io/wikibook.github.io/2021/02/first/","year":"2021"}],"tags":[{"title":"Hugo 建站","uri":"https://jarick-jiao.github.io/wikibook.github.io/tags/Hugo-%E5%BB%BA%E7%AB%99/"},{"title":"专业技术","uri":"https://jarick-jiao.github.io/wikibook.github.io/tags/%E4%B8%93%E4%B8%9A%E6%8A%80%E6%9C%AF/"},{"title":"博客指南","uri":"https://jarick-jiao.github.io/wikibook.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/"},{"title":"案例分享","uri":"https://jarick-jiao.github.io/wikibook.github.io/tags/%E6%A1%88%E4%BE%8B%E5%88%86%E4%BA%AB/"},{"title":"流程制度","uri":"https://jarick-jiao.github.io/wikibook.github.io/tags/%E6%B5%81%E7%A8%8B%E5%88%B6%E5%BA%A6/"}]}